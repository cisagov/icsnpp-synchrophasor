module SYNCHROPHASOR;

# Copyright 2023 Battelle Energy Alliance, LLC

##
## ICSNPP - Synchrophasor
##
## C37.118.2-2011 IEEE Standard for Synchrophasor Data Transfer for Power Systems
##   - https://github.com/cisagov/ICSNPP/files/10747425/ieee-standard-for-synchrophasor-data-transfer-for-power-systems_trimmed.pdf
##   - https://github.com/cisagov/icsnpp-synchrophasor/issues/1
##
## Seth Grover, Idaho National Lab, March 2023
##

import spicy;

# C37.118.2-2011, 6.2 Message framework, Table 2, SYNC field definition ################################################
public type FrameTypeCode = enum {
    DATA_FRAME              = 0,
    HEADER_FRAME            = 1,
    CONFIG_1_FRAME          = 2,
    CONFIG_2_FRAME          = 3,
    COMMAND_FRAME           = 4,
    CONFIG_3_FRAME          = 5,
};

public type SyncField = unit() {
    var frameType: FrameTypeCode = FrameTypeCode::Undef;
    var version: uint8 = 0;

    # first byte must be 0xAA (170)
    : uint8 &requires=($$ == 170);

    # remainder of sync field holds protocol version and the frame type code
    : bitfield(8) {
        version : 0..3;
        frameTypeBits : 4..6;
        _ : 7;
    } {
        self.version = $$.version;
        self.frameType = cast<FrameTypeCode>(cast<uint8>($$.frameTypeBits));
    }
};

# C37.118.2-2011, 6.2.2 Time and message time quality ##################################################################
public type FracSec = unit(header : FrameHeader, frms : Frames) {
    var fracSec  : real = 0.0;

    data : bitfield(32) {
        fracSecRaw : 0..23;
        qualityIndicator : 24..27;
        leapSecPending : 28;
        leapSecOccurred : 29;
        leapSecDirection : 30;
        _ : 31;
    };

    # perform calculation of fractional seconds based on configuration's TIME_BASE (C37.118.2-2011, 6.2.2)
    on %done {
        if (header.dataStreamId in frms.streamSourceIdConfigFrameMap) {
            self.fracSec = cast<real>(self.data.fracSecRaw) / cast<real>(frms.streamSourceIdConfigFrameMap[header.dataStreamId].timeBase);
        }
    }
};

# C37.118.2-2011, 6.2.1 Overall message ################################################################################
public type FrameHeader = unit(frms : Frames) {
    var timeStamp : time;
    sync : SyncField;
    frameSize : uint16;
    dataStreamId : uint16;
    : uint32 {
        self.timeStamp = cast<time>($$);
    }
    fracSec : FracSec(self, frms) {
        self.timeStamp = self.timeStamp + cast<interval>(self.fracSec.fracSec);
    }
};

# C37.118.2-2011, 6.6 Command frame, Table 14 ##########################################################################
public type CommandFrame = unit(header : FrameHeader, frms : Frames, chk : uint16) {
    cmd : uint16;
    extframe : uint16[] &eod;
};

# C37.118.2-2011, 6.5 Header frame, Table 13 ###########################################################################
public type HeaderFrame = unit(header : FrameHeader, frms : Frames, chk : uint16) {
    var data : string = "";
    : bytes &eod {
        self.data = $$.decode(hilti::Charset::ASCII);
    }
};

# C37.118.2-2011, 6.4 Word definitions unique to configuration frames 1 and 2, Table 9 #################################
# - and/or -
# C37.118.2-2011, 6.4 Word definitions unique to configuration frame 3, Table 11 #######################################

public type ConfigFormat = unit() {
    format : bitfield(16) {
        phasorShape : 0;  # 0 = phasor real and imaginary (rectangular), 1 = magnitude and angle (polar)
        phasorFormat : 1; # 0 = phasors 16-bit integer, 1 = floating point
        analogFormat : 2; # 0 = analogs 16-bit integer, 1 = floating point
        freqFormat : 3;   # 0 = FREQ/DFREQ 16-bit integer, 1 = floating point
        _ : 4..15;        # unused
    };
} &convert=self.format;

public type PhasorConversionFactor = unit(frameType : FrameTypeCode) {

    # CFG-1 and CFG-2
    format : bitfield(32) {
        phunit : 0..7;
        phvalue : 8..31;
    } if (frameType != FrameTypeCode::CONFIG_3_FRAME);

    # CFG-3
    flags : bitfield(16) {
        _ : 0;
        upsampledInterpolation : 1;
        upsampledExtrapolation : 2;
        downsampledReselection : 3;
        downsampledFIRFilter : 4;
        downsampledNoFIRFilter : 5;
        filteredWithoutChangingSamplint : 6;
        calibrationMagAdj : 7;
        calibrationPhasAdj : 8;
        rotationPhaseAdj : 9;
        pseudoPhasorVal : 10;
        _ : 11..14;
        modAppl : 15;
    } if (frameType == FrameTypeCode::CONFIG_3_FRAME);
    typeInd : bitfield(8) {
        phasorComponent : 0..2;
        phasorType : 3;
        _ : 4..7;
    } if (frameType == FrameTypeCode::CONFIG_3_FRAME);
    userDef : uint8 if (frameType == FrameTypeCode::CONFIG_3_FRAME);
    scaleFactor : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (frameType == FrameTypeCode::CONFIG_3_FRAME);
    angleAdj : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (frameType == FrameTypeCode::CONFIG_3_FRAME);

};

public type AnalogConversionFactor = unit(frameType : FrameTypeCode) {
    # CFG-1 and CFG -2
    var analogFlags : uint8 = 0;
    var userDefinedScaling : int32 = 0;

    : bitfield(32) {
        analogFlags : 0..7;
        userDefinedScaling : 8..31;
    } if (frameType != FrameTypeCode::CONFIG_3_FRAME) {
        self.analogFlags = cast<uint8>($$.analogFlags);
        self.userDefinedScaling = cast<int32>($$.userDefinedScaling);
    }

    # CFG-3
    magScale : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (frameType == FrameTypeCode::CONFIG_3_FRAME);
    offset : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (frameType == FrameTypeCode::CONFIG_3_FRAME);
};

public type DigitalStatusMaskWords = unit() {
    normalStatusMask : uint16;
    validInputsMask : uint16;
};

public type NominalLineFreq = unit() {
    code : bitfield(16) {
        fundamentalFreq : 0;
        _ : 1..15;
    };
} &convert=self.code;

# C37.118.2-2011, 6.4 Configuration-1 and -2 frame, Table 8 ############################################################
# C37.118.2-2011, 6.4 Configuration-3 frame, Table 10 ##################################################################
public type ConfigFrame = unit(header : FrameHeader, frms : Frames, chk : uint16) {
    var initialized : bool = False;
    var cfgNum : bool = False;
    var timeBase : uint32 = 1000000;
    var contIdx : uint16 = 0;
    var allStationNames : vector<string>;
    var allPhasorNames : vector<string>;
    var allAnalogNames : vector<string>;
    var allDigitalNames : vector<string>;

    : uint16 if (header.sync.frameType == FrameTypeCode::CONFIG_3_FRAME) {
        self.contIdx = $$;
    }

    : bitfield(32) {
        subdivision : 0..23;
        _ : 24..31;
    } {
        if ($$.subdivision > 0) {
            self.timeBase = $$.subdivision;
        }
    }

    numPMU : uint16;
    pmuCfgs : PMUConfig(header, frms)[self.numPMU];
    dataRate : int16;

    : bytes &eod; # any remaining unparsed data

    on %done {
        self.initialized = True;
        frms.streamSourceIdConfigFrameMap[header.dataStreamId] = self;
        if ((self?.pmuCfgs) && (|self.pmuCfgs| > 0)) {
            for (pmu in self.pmuCfgs) {
                if (pmu.initialized == True) {
                    if ((pmu?.stationName) && (|pmu.stationName| > 0)) {
                        self.allStationNames.push_back(pmu.stationName);
                    }
                    for (ph in pmu.phnam) {
                        if (|ph| > 0) {
                            self.allPhasorNames.push_back(ph);
                        }
                    }
                    for (an in pmu.annam) {
                        if (|an| > 0) {
                            self.allAnalogNames.push_back(an);
                        }
                    }
                    for (dg in pmu.dgnam) {
                        if (|dg| > 0) {
                            self.allDigitalNames.push_back(dg);
                        }
                    }
                }
            }
        }
    }
};

# CFG-1 and CFG-2: Table 8  - fields 8-19
# CFG-3:           Table 10 - fields 9-27
public type PMUConfig = unit(header : FrameHeader, frms : Frames) {
    var frameType: FrameTypeCode = FrameTypeCode::Undef;     # stored from header.sync.frameType
    var initialized : bool = False;                          # set to True on %done
    var svcClass : string = "";                              # only for CFG-3
    var dgnmrMult : uint32;                                  # used for the byte length of the dgnam field

    stationName : NameField(header.sync.frameType);

    dataSourceId : uint16 {
        self.frameType = header.sync.frameType;
    }

    globalPMUID : bytes &size = 16 if (self.frameType == FrameTypeCode::CONFIG_3_FRAME);

    format : ConfigFormat;

    # phasor/analog/digital counts
    phnmr : uint16;
    annmr : uint16;
    dgnmr : uint16 {
        # used for the byte length of the dgnam field
        if (self.frameType == FrameTypeCode::CONFIG_3_FRAME) {
            self.dgnmrMult = 1;
        } else {
            self.dgnmrMult = 16;
        }
    }

    # phasor/analog/digital names
    phnam : NameField(self.frameType)[self.phnmr];
    annam : NameField(self.frameType)[self.annmr];
    dgnam : NameField(self.frameType)[self.dgnmrMult * self.dgnmr];

    # conversion factor for phasor channels
    phunit : PhasorConversionFactor(self.frameType)[self.phnmr];

    # conversion factor for analog channels
    anunit : AnalogConversionFactor(self.frameType)[self.annmr];

    # mask words for digital status words
    digunit : DigitalStatusMaskWords[self.dgnmr];

    # WGS84 datum for PMU location (CFG-3)
    pmuLat : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (self.frameType == FrameTypeCode::CONFIG_3_FRAME);
    pmuLon : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (self.frameType == FrameTypeCode::CONFIG_3_FRAME);
    pmuElev : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (self.frameType == FrameTypeCode::CONFIG_3_FRAME);

    # service class, measurement window and measurement group delay (CFG-3)
    : bytes &size = 1 if (self.frameType == FrameTypeCode::CONFIG_3_FRAME) {
        self.svcClass = $$.decode(hilti::Charset::ASCII);
    }
    window : int32 if (self.frameType == FrameTypeCode::CONFIG_3_FRAME);
    groupDelay : int32 if (self.frameType == FrameTypeCode::CONFIG_3_FRAME);

    # nominal line frequency code and flags
    fnom : uint16;

    # configuration change count
    cfgcnt : uint16;

    on %done {
        self.initialized = True;
        frms.dataSourceIdPmuConfigMap[self.dataSourceId] = self;
    }
};

# 16-bytes interpreted as an ASCII-encoded string (for CFG-1 and CFG-2) #################################################
#  - OR -
# C37.118.2-2011, 6.4 Name field description, table 12 (for CFG-3) ######################################################
type NameField = unit(frameType : FrameTypeCode) {
    var trimmedName : string = "";

    : bytes &size = 16 if (frameType != FrameTypeCode::CONFIG_3_FRAME) {
        self.trimmedName = $$.decode(hilti::Charset::ASCII);
        # TODO: spicy bug here (error ...: bound object has expired)
        # self.trimmedName = $$.strip(spicy::Side::Both).decode(hilti::Charset::ASCII);
        #
        # https://github.com/zeek/spicy/issues/1390
        # repro per @bbanier:
        #      global input = b"   123   ";
        #      public type X = unit {
        #          var s: string;
        #          x: bytes &eod &parse-from=input {
        #              self.s = $$.strip(spicy::Side::Both).decode(spicy::Charset::ASCII);
        #          }
        #      };
    }

    nameLen : uint8 if (frameType == FrameTypeCode::CONFIG_3_FRAME);
    : bytes &size = self.nameLen if (frameType == FrameTypeCode::CONFIG_3_FRAME) {
        self.trimmedName = $$.decode(hilti::Charset::UTF8);
    }

} &convert=self.trimmedName;

# C37.118.2-2011, 6.3 Data frame, Table 5 and Table 6 ##################################################################
public type DataFrame = unit(header : FrameHeader, frms : Frames, chk : uint16) {
    var cfgFrame : ConfigFrame;
    var pmuCfg : PMUConfig;
    var numPMU : uint16 = 0;
    var phnmr : uint16 = 0;
    var annmr : uint16 = 0;
    var dgnmr : uint16 = 0;

    on %init {
        if ((header.dataStreamId in frms.streamSourceIdConfigFrameMap) &&
            (frms.streamSourceIdConfigFrameMap[header.dataStreamId].initialized == True)) {
            self.cfgFrame = frms.streamSourceIdConfigFrameMap[header.dataStreamId];
            self.numPMU = self.cfgFrame.numPMU;
        }
        if ((header.dataStreamId in frms.dataSourceIdPmuConfigMap) &&
            (frms.dataSourceIdPmuConfigMap[header.dataStreamId].initialized == True)) {
            self.pmuCfg = frms.dataSourceIdPmuConfigMap[header.dataStreamId];
            self.phnmr = self.pmuCfg.phnmr;
            self.annmr = self.pmuCfg.annmr;
            self.dgnmr = self.pmuCfg.dgnmr;
        }
    }

    data: PMUData(header, frms, self.cfgFrame, self.pmuCfg)[self.numPMU] if ((self?.cfgFrame) && (self?.pmuCfg) && (self.numPMU > 0));

    : bytes &eod; # any remaining unparsed data
};

public type PMUData = unit(header : FrameHeader, frms : Frames, cfgFrame : ConfigFrame, pmuCfg : PMUConfig) {
    stat : bitfield(16) {
        triggerReason : 0..3;
        unlockedTime : 4..5;
        pmuTimeQuality : 6..8;
        dataModified : 9;
        configChange : 10;
        pmuTriggerPickup : 11;
        dataSortingType : 12;
        pmuSyncError : 13;
        dataErrorIndicator : 14..15;
    };

    phasors : PhasorEstimate(pmuCfg)[pmuCfg.phnmr] if ((pmuCfg?.phnmr) && (pmuCfg.phnmr > 0));
    freq : FrequencyDeviation(pmuCfg);
    dfreq : ROCOF(pmuCfg);
    analog : AnalogData(pmuCfg)[pmuCfg.annmr] if ((pmuCfg?.annmr) && (pmuCfg.annmr > 0));
    digital : uint16[pmuCfg.dgnmr] if ((pmuCfg?.dgnmr) && (pmuCfg.dgnmr > 0));
};

# Data type indicated by the FORMAT field in configuration 1, 2, and 3 frames
# 16-bit integer values:
# Rectangular format:
# -real and imaginary, real value first
# -16-bit signed integers, range –32 767 to +32 767
# Polar format:
# -magnitude and angle, magnitude first
# -magnitude 16-bit unsigned integer range 0 to 65535
# -angle 16-bit signed integer, in radians × 10 4 , range –31 416 to +31 416
#
# 32-bit values in IEEE floating-point format:
# Rectangular format:
# -real and imaginary, in engineering units, real value first
# Polar format:
# -magnitude and angle, magnitude first and in engineering units
# -angle in radians, range –π to + π
public type PhasorEstimate = unit(pmuCfg : PMUConfig) {
    rectangular : PhasorRectangular(pmuCfg) if (pmuCfg.format.phasorShape == 0);
    polar       : PhasorRectangular(pmuCfg) if (pmuCfg.format.phasorShape == 1);
};

public type PhasorRectangular = unit(pmuCfg : PMUConfig) {
    realValInt          : int16                                                                        if (pmuCfg.format.phasorFormat == 0);
    realValFloat        : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (pmuCfg.format.phasorFormat == 1);
    imaginaryValInt     : int16                                                                        if (pmuCfg.format.phasorFormat == 0);
    imaginaryValFloat   : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (pmuCfg.format.phasorFormat == 1);
};

public type PhasorPolar = unit(pmuCfg : PMUConfig) {
    magnitudeValInt     : uint16                                                                       if (pmuCfg.format.phasorFormat == 0);
    magnitudeValFloat   : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (pmuCfg.format.phasorFormat == 1);
    angleValInt         : int16                                                                        if (pmuCfg.format.phasorFormat == 0);
    angleValFloat       : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (pmuCfg.format.phasorFormat == 1);
};

# Frequency deviation from nominal, in mHz
# Range–nominal (50 Hz or 60 Hz) –32.767 to +32.767 Hz
# 16-bit integer or 32-bit floating point
# 16-bit integer: 16-bit signed integers, range –32 767 to +32 767
# 32-bit floating point: actual frequency value in IEEE floating-point format.
# Data type indicated by the FORMAT field in configuration 1, 2, and 3 frames
public type FrequencyDeviation = unit(pmuCfg : PMUConfig) {
    freqDevMhzInt   : int16                                                                        if (pmuCfg.format.freqFormat == 0);
    freqDevMhzFloat : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (pmuCfg.format.freqFormat == 1);
};

# ROCOF, in hertz per second times 100
# Range –327.67 to +327.67 Hz per second
# Can be 16-bit integer or IEEE floating point, same as FREQ above. Data type indicated
# by the FORMAT field in configuration 1, 2, and 3 frames
public type ROCOF = unit(pmuCfg : PMUConfig) {
    rocofInt   : int16                                                                        if (pmuCfg.format.freqFormat == 0);
    rocofFloat : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (pmuCfg.format.freqFormat == 1);
};

# Analog word. 16-bit integer. It could be sampled data such as control signal or
# transducer value. Values and ranges defined by user.
# Can be 16-bit integer or IEEE floating point. Data type indicated by the FORMAT field
# in configuration 1, 2, and 3 frames
public type AnalogData = unit(pmuCfg : PMUConfig) {
    analogDataInt   : int16                                                                        if (pmuCfg.format.analogFormat == 0);
    analogDataFloat : real &type=spicy::RealType::IEEE754_Single &byte-order=spicy::ByteOrder::Big if (pmuCfg.format.analogFormat == 1);
};

# Fallback unit for incorrectly formatted frames #######################################################################
type NotImplemented = unit(header : FrameHeader, frms : Frames, chk : uint16) {
    : bytes &eod; # any remaining unparsed data
};

# C37.118.2-2011, 6.2.1 Overall message ################################################################################
public type Frame = unit(inout frms : Frames) {
    var parseError : bool = False;

    header : FrameHeader(frms);
    _payload : bytes &size=(self.header.frameSize - 16);
    chk : uint16;

    switch (self.header.sync.frameType) {
        FrameTypeCode::DATA_FRAME     -> DATA_FRAME       : DataFrame(self.header, frms, self.chk);
        FrameTypeCode::HEADER_FRAME   -> HEADER_FRAME     : HeaderFrame(self.header, frms, self.chk);
        FrameTypeCode::COMMAND_FRAME  -> COMMAND_FRAME    : CommandFrame(self.header, frms, self.chk);
        FrameTypeCode::CONFIG_1_FRAME,
        FrameTypeCode::CONFIG_2_FRAME,
        FrameTypeCode::CONFIG_3_FRAME -> CONFIG_FRAME     : ConfigFrame(self.header, frms, self.chk);
        *                             ->                  : NotImplemented(self.header, frms, self.chk);
    } &parse-from=self._payload if (self.header.sync.frameType);

    on %error {
      self.parseError = True;
    }
};

public type Frames = unit() {
    var dataSourceIdPmuConfigMap : map<uint16, PMUConfig>;
    var streamSourceIdConfigFrameMap : map<uint16, ConfigFrame>;
    frms : Frame(self)[];
};
